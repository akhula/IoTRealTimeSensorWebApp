@model IEnumerable<ActiveSense.Tempsense.model.Modelo.Medida>
@{
    ViewBag.Title = "Reportes";
}
<div style="padding: 0%; background-color: #babdc7;" class="panel panel">
    <div class="panel-heading"><h2>Reporte</h2></div>
    <div class="panel-body">
        <div id="listaMedidas" class="form-inline">
            <div class="row">
                <div class="col-xs-5 col-md-5">
                    <div class="form-group">

                        <div id="fechaInicio" class="input-append">
                            <label for="fechaInicio"> Fecha Inicio </label>
                            <input class="form-control" data-format="yyyy-MM-dd" type="text" id="fechaInicioData" />
                            <span class="add-on">
                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                    <img src="~/Content/images/img_calendar.png" />
                                </i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-xs-5 col-md-5">
                    <div class="form-group">

                        <div id="fechaFin" class="input-append">
                            <label for="fechaFin"> Fecha Fin </label>
                            <input data-format="yyyy-MM-dd" type="text" class="form-control" id="fechaFinData" />
                            <span class="add-on">
                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                    <img src="~/Content/images/img_calendar.png" />
                                </i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-xs-2 col-md-2">
                    <div class="form-group">
                        <div>
                            <button type="button" id="btnPrint" class="btn btn-primary">Imprimir</button>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-xs-5 col-md-5">
                    <label for="DispositivoID"> Empresa</label>
                    <div class="form-group">
                        @Html.DropDownList("Empresas", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="col-xs-5 col-md-5" id="contentSelectDisp">
                    <label for="DispositivoID"> Sensor</label>
                    <div class="form-group">
                        @Html.DropDownList("DispositivoID", null, htmlAttributes: new { @class = "form-control" })
                        <img id="prelaodInner" src="~/Content/images/preloadInner.gif" />
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="col-xs-3 col-md-3">
                    <label for="FiltroTiempo"> Filtro </label><br />
                    <div class="form-group">
                        @Html.DropDownList("FiltroTiempo", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>
</div>



<br />

<div id="ContenedorPreload">
    <img src="~/Content/images/8.gif" />
</div>

<div id="printThis">
    <h3 id="titulo_grafica"></h3>
    <canvas id="graficaMedidas" width="200" height="100"></canvas>
</div>
<br />
<div id="printThis2">
    <div id="tablaPaginada" class="table-responsive">
        <table id="tablaMedidas" class="display" cellspacing="0" width="100%">
            <thead>
                <tr>
                    <th>Valor</th>
                    <th>Dispositivo</th>
                    <th>Fecha Hora</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
@section scripts{

    <script type="text/javascript">

        var objTablaPaginada = '';
        var MENSAJE_ERROR_FECHA_MAYOR = 'La fecha inicial debe ser menor que la fecha final';
        var MENSAJE_ERROR_FECHA_VACIO = 'Se debe ingresar las dos fechas';
        var MENSAJE_ERROR_CONEXION = "Ha ocurrido un error en el sistema por favor intente de nuevo";
        var MENSAJE_ERROR_DISPOSITIVO = "Por favor seleccione un dispositivo";
        var FILTROS_DIAS = 1440;
        var MENSAJE_ERROR_FECHA_FILTRO = 'Se debe ingresar las dos fechas para utilizar este filtro';

        $(document).ready(function () {

            $('#tablaMedidas').hide();
            $("#ContenedorPreload").hide();

            $('#fechaInicio').datetimepicker({
                pickTime: false,
                autoclose: true
            });

            $('#fechaFin').datetimepicker({
                pickTime: false,
                autoclose: true
            });

            // funcion que permite limpiar los calendarios si ha ocurrido un error
            function limpiarCalendario() {
                $("#fechaInicioData").val('');
                $("#fechaFinData").val('');
            }

            // evento de cambio de dispositivo
            $("#DispositivoID").change(function () {
                buscarInformacion();
            });

            //evento de cambio de filtro tiempo
            $('#FiltroTiempo').change(function () {
                var valorFiltro = $(this).val();
                if (valorFiltro != 0 && valorFiltro != "") {
                    buscarInformacion();
                }
            });

            //evento de cambio de empresa
            $('#Empresas').change(function () {
                var idEmpresa = $(this).val();
                if (idEmpresa != 0 && idEmpresa != "") {

                    $("#DispositivoID").html("");
                    $("#DispositivoID").hide();
                    $('#prelaodInner').show();
                    $.ajax({
                        url: '@Url.Action("ObtenerDispositivoAsociado", "Report" )',
                        type: 'POST',
                        data: JSON.stringify({ idEmpresa: idEmpresa }),
                        datatype: 'application/json',
                        contentType: 'application/json',
                        cache: false,
                        success: function (result) {
                            $.each($.parseJSON(result), function (i, dispositivo) {
                                $("#DispositivoID").append($('<option></option>').val(dispositivo.idDispositivo).html(dispositivo.nombreDispositivo))
                            })
                            $('#prelaodInner').hide();
                            $("#DispositivoID").show();
                            buscarInformacion();

                        },
                        error: function (xhr, error) {
                            $('#prelaodInner').hide();
                            $("#DispositivoID").show();
                            Command: toastr["error"](MENSAJE_ERROR_CONEXION, 'ERROR');
                        },
                    });
                }
            });

            //funcion que permite realizar la busqueda cuando se cambia o seleciona el dispositivo
            function buscarInformacion() {
                var idDispositivo = $("#DispositivoID").val();
                var fechaInicio = $("#fechaInicioData").val();
                var fechaFin = $("#fechaFinData").val();

                if (validarPeticion(fechaInicio, fechaFin)) {
                    $('#tablaMedidas').show();
                    renderizarTabla(idDispositivo, fechaInicio, fechaFin);
                    solicitarDatosEstadistica();
                }
            }

            // funcion de proposito general que permite validar una peticion
            function validarPeticion(fechaInicio, fechaFin) {
                var validacionD = validarDispositivo();;
                var validacionF = validarFechas(fechaInicio, fechaFin);
                var validacionFtr = validarFiltroDias(fechaInicio, fechaFin);
                return (validacionD && validacionF && validacionFtr) ? true : false;
            }

            // funcion que permite validar si se han seleccionado los dias para
            // para realizar el filtro por dias
            function validarFiltroDias(fechaInicio, fechaFin) {
                var esValido = true;
                var filtro = $("#FiltroTiempo").val();
                if ( filtro == FILTROS_DIAS ) {
                    if (fechaInicio == "" || fechaFin == "") {
                        Command: toastr["error"](MENSAJE_ERROR_FECHA_FILTRO, 'ERROR');
                        esValido = false;
                    }
                }
                return esValido;
            }

            // funcion de validacion de dispositivo
            function validarDispositivo() {
                var idDispositivo = $("#DispositivoID").val();
                var validate = false;
                if (idDispositivo != 0 && idDispositivo != undefined) {
                    validate = true;
                } else {
                    Command: toastr["error"](MENSAJE_ERROR_DISPOSITIVO, 'ERROR');
                }
                return validate;
            }

            // funcion que permite validar que la fecha de inicio se mayor que la fecha final
            function validarFechas(fechaInicio, fechaFin) {
                if (fechaInicio > fechaFin) {
                    Command: toastr["error"](MENSAJE_ERROR_FECHA_MAYOR, 'ERROR');
                    limpiarCalendario();
                    return false;
                }

                if (fechaInicio == "" && fechaFin != "") {
                    Command: toastr["error"](MENSAJE_ERROR_FECHA_VACIO, 'ERROR');
                    limpiarCalendario();
                    return false;
                }
                return true;
            }

            //funcion encargada construir la tabla de medidas recibe como parametro
            //identificacion de dispositivo, fecha de inicio, fecha de fin
            // ademas permite registrar eventos cuando se presiona el selector de tamaño y se pagina
            function renderizarTabla(idDispositivo, fechaInicio, fechaFin) {

                //Mostrar contenedor de tabla
                var objTablaMedidasVisual = $('#tablaMedidas');
                objTablaMedidasVisual.show();
                //Obtener tabla
                var objContenedorTablaPaginada = $('#tablaPaginada');
                //Generar tabla
                objTablaPaginada = objTablaMedidasVisual.DataTable({
                    "processing": true,
                    "serverSide": true,
                    "searching": false,
                    "destroy": true,
                    "lengthMenu": [10, 15, 20],
                    language: {
                        processing: "Procesando...",
                        search: "Buscar:",
                        lengthMenu: "Mostrar _MENU_ registros",
                        info: "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                        infoEmpty: "Mostrando registros del 0 al 0 de un total de 0 registros",
                        infoFiltered: "(filtrado de un total de _MAX_ registros)",
                        infoPostFix: "",
                        loadingRecords: "Cargando...",
                        zeroRecords: "No se encontraron resultados",
                        emptyTable: "Ningún dato disponible en esta tabla",
                        paginate: {
                            first: "Primero",
                            previous: "Ant",
                            next: "Sig",
                            last: "Último",
                        },
                        aria: {
                            sortAscending: ": Activar para ordenar la columna de manera ascendente",
                            sortDescending: ": Activar para ordenar la columna de manera descendente"
                        }
                    },
                    //Peticion de datos servicio
                    "ajax": {
                        "type": "POST",
                        "url": '@Url.Action("ObtenerDatosTabla", "Report" )',
                        //"data": {
                        //    "idDispositivo": idDispositivo,
                        //    "fechaInicio": fechaInicio,
                        //    "fechaFin": fechaFin
                        //},
                        "data": function (d) {
                            d.idDispositivo = idDispositivo,
                            d.fechaInicio = $("#fechaInicioData").val(),
                            d.fechaFin = $("#fechaFinData").val(),
                            d.filtroTiempo = $("#FiltroTiempo").val()
                        },
                        // Mostras toastr error si hay error
                        "error": function () {
                            objContenedorTablaPaginada.hide();
                            Command: toastr["error"](MENSAJE_ERROR_CONEXION, 'ERROR');
                        }
                    },
                    "columns": [
                        { "data": "temperatura", "orderable": false },
                        { "data": "nombreDispositivo", "orderable": false },
                        { "data": "fecha", "orderable": false }
                    ]
                });

                var objFechaInicio = $("#fechaInicioData");
                var objFechaFinal = $("#fechaFinData");

                objTablaPaginada.on('length.dt', function (e, settings, len) {
                    var fechaInicio = objFechaInicio.val();
                    var fechaFin = objFechaFinal.val();
                    if (validarPeticion(fechaInicio, fechaFin)) {
                        solicitarDatosEstadistica();
                    }
                });

                objTablaPaginada.on('page.dt', function () {
                    var fechaInicio = objFechaInicio.val();
                    var fechaFin = objFechaFinal.val()


                    if (validarPeticion(fechaInicio, fechaFin)) {
                        solicitarDatosEstadistica();
                    }
                });

            }


            // funcion que permite construir la tabla estadistico recibe como parametro
            // un arreglo de fechas y un arreglo de temperaturas.
            function renderizarGraficaEstadistica(fechas, temperaturas, umbralesSuperiores, umbralesInferiores, toleranciaInferiorList, toleranciaSuperiorList) {
                var canvas = document.getElementById("graficaMedidas");
                var ctx = canvas.getContext("2d");


                var horizonalLinePlugin = {
                    afterDraw: function (chartInstance) {
                        var yScale = chartInstance.scales["y-axis-0"];
                        var canvas = chartInstance.chart;
                        var ctx = canvas.ctx;
                        var index;
                        var line;
                        var style;

                        if (chartInstance.options.horizontalLine) {
                            for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                                line = chartInstance.options.horizontalLine[index];

                                if (!line.style) {
                                    style = "rgba(169,169,169, .6)";
                                } else {
                                    style = line.style;
                                }

                                if (line.y) {
                                    yValue = yScale.getPixelForValue(line.y);
                                } else {
                                    yValue = 0;
                                }

                                ctx.lineWidth = 3;

                                if (yValue) {
                                    ctx.beginPath();
                                    ctx.moveTo(0, yValue);
                                    ctx.lineTo(canvas.width, yValue);
                                    ctx.strokeStyle = style;
                                    ctx.stroke();
                                }

                                if (line.text) {
                                    ctx.fillStyle = style;
                                    ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                                }
                            }
                            return;
                        };
                    }
                };
                Chart.pluginService.register(horizonalLinePlugin);

                var data = {
                    labels: fechas,
                    datasets: [
                                {
                                    label: "Valor",
                                    borderColor: "rgba(75,192,192,1)",
                                    data: temperaturas,
                                    spanGaps: true,
                                },
                                {
                                    label: "Tolerancia Máxima",
                                    lineTension: 0.1,
                                    borderColor: "#ff0000",
                                    borderDashOffset: 0.0,
                                    pointBorderWidth: 0,
                                    pointHoverRadius: 0,
                                    pointHoverBorderWidth: 0,
                                    pointRadius: 0,
                                    pointHitRadius: 0,
                                    backgroundColor: "rgba(0,0,0,0)",
                                    data: toleranciaSuperiorList,
                                },
                                {

                                    label: "Tolerancia Mínima",
                                    fill: false,
                                    lineTension: 0.1,
                                    borderColor: "#ff0000",
                                    borderDashOffset: 0.0,
                                    pointBorderWidth: 0,
                                    pointHoverRadius: 0,
                                    pointHoverBorderWidth: 0,
                                    pointRadius: 0,
                                    pointHitRadius: 0,
                                    backgroundColor: "rgba(0,0,0,0)",
                                    data: toleranciaInferiorList,
                                },
                                 {
                                     label: "Temperatura Máxima",
                                     lineTension: 0.1,
                                     borderColor: "#000000",
                                     borderDashOffset: 0.0,
                                     pointBorderWidth: 0,
                                     pointHoverRadius: 0,
                                     pointHoverBorderWidth: 0,
                                     pointRadius: 0,
                                     pointHitRadius: 0,
                                     backgroundColor: "rgba(0,0,0,0)",
                                     data: umbralesSuperiores,
                                 },
                                   {
                                       label: "Temperatura Mínima",
                                       lineTension: 0.1,
                                       borderColor: "#000000",
                                       borderDashOffset: 0.0,
                                       pointBorderWidth: 0,
                                       pointHoverRadius: 0,
                                       pointHoverBorderWidth: 0,
                                       pointRadius: 0,
                                       pointHitRadius: 0,
                                       backgroundColor: "rgba(0,0,0,0)",
                                       data: umbralesInferiores,
                                   }

                    ]
                };

                var tolMaxima = toleranciaSuperiorList[0] !== undefined ? toleranciaSuperiorList[0] : 0;
                var tolMinima = toleranciaInferiorList[0] !== undefined ? toleranciaInferiorList[0] : 0;

                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: data,
                    options: {
                        "horizontalLine":
                            [
                                {
                                    "y": tolMaxima,
                                    "style": "#ff0000",
                                    "text": "Tol Max : " + tolMaxima
                                },
                                {
                                    "y": tolMinima,
                                    "style": "#ff0000",
                                    "text": "Tol Min : " + tolMinima
                                },
                            ],
                        scales: {
                            xAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Fechas'
                                }
                            }],
                            yAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Valor'
                                }
                            }]
                        },
                        responsive: true,
                    }
                });

            }

            // funcion que permite cargar los datos mediante peticiones ajax para mostrar en grafica
            // luego llama a funcion para renderizar la grafica estadistica
            function solicitarDatosEstadistica() {
                var info = objTablaPaginada.page.info();
                $("#graficaMedidas").hide();
                var objTituloGrafico = $("#titulo_grafica");
                objTituloGrafico.text('');
                $("#ContenedorPreload").show();

                $.ajax(
               {
                   url: '@Url.Action("ObtenerDatosGrafico", "Report")',
                   data: {
                       pageIndex: 1,
                       start: info.start,
                       length: info.length,
                       idDispositivo: $("#DispositivoID").val(),
                       fechaInicio: $("#fechaInicioData").val(),
                       fechaFin: $("#fechaFinData").val(),
                       filtroTiempo: $("#FiltroTiempo").val(),
                   },
                   type: "POST",
                   success: function (msg) {
                       $("#ContenedorPreload").hide();

                       if (msg.fechas.length > 0) {
                           $("#graficaMedidas").show();
                           renderizarGraficaEstadistica(msg.fechas, msg.temperaturas,
                                                   msg.umbralSuperior, msg.umbralInferior,
                                                   msg.toleranciaInferiorList, msg.toleranciaSuperiorList);
                           objTituloGrafico.text("Gráfica " + $("#DispositivoID option:selected").text());
                       }


                   },
                   error: function (result) {
                       objTituloGrafico.html('');
                       $("#ContenedorPreload").hide();
                   }
               });
            }
        });

        //var canvas = document.getElementById('graficaMedidas');
        //printBtn.addEventListener('click', function () {
        //    document.body.removeChild(canvas);
        //    var img = new Image;
        //    img.id = 'tempPrintImage';
        //    img.onload = print;
        //    img.src = canvas.toDataURL();
        //    document.body.appendChild(img);
        //}, false);

        document.getElementById("btnPrint").onclick = function () {
            printElement(document.getElementById("printThis"));
            printElement(document.getElementById("printThis2"), true, "<hr />");
            window.print();
        }

        function printElement(elem, append, delimiter) {
            var domClone = elem.cloneNode(true);

            var $printSection = document.getElementById("printSection");

            if (!$printSection) {
                var $printSection = document.createElement("div");
                $printSection.id = "printSection";
                document.body.appendChild($printSection);
            }

            if (append !== true) {
                $printSection.innerHTML = "";
            }

            else if (append === true) {
                if (typeof (delimiter) === "string") {
                    $printSection.innerHTML += delimiter;
                }
                else if (typeof (delimiter) === "object") {
                    $printSection.appendChlid(delimiter);
                }
            }

            $printSection.appendChild(domClone);
        }

    </script>
    <script src="~/Scripts/Chart.bundle.min.js" type="text/javascript"></script>
}


